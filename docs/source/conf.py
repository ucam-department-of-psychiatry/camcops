"""
docs/source/conf.py

===============================================================================

    Copyright (C) 2012, University of Cambridge, Department of Psychiatry.
    Created by Rudolf Cardinal (rnc1001@cam.ac.uk).

    This file is part of CamCOPS.

    CamCOPS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CamCOPS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CamCOPS. If not, see <https://www.gnu.org/licenses/>.

===============================================================================

Sphinx configuration file
"""

import os
import sys
import logging
from typing import Any
import warnings

from cardinal_pythonlib.logs import (
    BraceStyleAdapter,
    main_only_quicksetup_rootlogger,
)
from sphinx.application import Sphinx
from sphinx.ext.autodoc import Options
from sqlalchemy.exc import SAWarning

from camcops_server.cc_modules.cc_version import CAMCOPS_SERVER_VERSION_STRING

log = BraceStyleAdapter(logging.getLogger(__name__))


# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

THIS_DIR = os.path.dirname(os.path.realpath(__file__))  # .../docs/source
CAMCOPS_ROOT_DIR = os.path.abspath(
    os.path.join(THIS_DIR, os.pardir, os.pardir)
)  # .../
CAMCOPS_SERVER_ROOT_DIR = os.path.join(CAMCOPS_ROOT_DIR, "server")

sys.path.insert(0, CAMCOPS_SERVER_ROOT_DIR)


# -- Project information -----------------------------------------------------

project = "CamCOPS"
# noinspection PyShadowingBuiltins
copyright = "2012, University of Cambridge, Department of Psychiatry"
author = "Rudolf Cardinal"

# The short X.Y version
version = CAMCOPS_SERVER_VERSION_STRING
# The full version, including alpha/beta/rc tags
release = CAMCOPS_SERVER_VERSION_STRING


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.githubpages",
    "sphinx.ext.imgmath",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = [
    "client/include*.rst",
    "server/include*.rst",
    "tasks/include*.rst",
    # not "**/include*.rst", as that would hit some of the tablet_qt files
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

# See http://www.sphinx-doc.org/en/master/theming.html
# html_theme = 'alabaster'  # elegant but monochrome
# html_theme = 'classic'  # like the Python docs. GOOD.
# html_theme = 'sphinxdoc'  # OK; TOC on right
# html_theme = 'scrolls'  # ugly
# html_theme = 'agogo'  # nice, but a bit big-print; TOC on right; justified
# html_theme = 'traditional'  # moderately ugly
html_theme = "nature"  # very nice. CHOSEN.
# html_theme = 'haiku'  # doesn't do sidebar
# html_theme = 'pyramid'  # Once inline code customized, GOOD.
# html_theme = 'bizstyle'  # OK
# html_theme = "sphinx_rtd_theme"  # ALSO GOOD. Better for source code than nature.  # noqa

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# https://stackoverflow.com/questions/18969093/how-to-include-the-toctree-in-the-sidebar-of-each-page
html_sidebars = {
    "**": [
        "globaltoc.html",
        "relations.html",
        "sourcelink.html",
        "searchbox.html",
    ]
}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "CamCOPSdoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements: dict[str, str] = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # RNC:
    #     'preamble': """
    # \usepackage[utf8]{inputenc}
    #     """,
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "CamCOPS.tex",
        "CamCOPS Documentation",
        "Rudolf Cardinal",
        "manual",
    )
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "camcops", "CamCOPS Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "CamCOPS",
        "CamCOPS Documentation",
        author,
        "CamCOPS",
        "Cambridge Cognitive and Psychiatric Assessment Kit.",
        "Miscellaneous",
    )
]


# -- Extension configuration -------------------------------------------------

# http://www.sphinx-doc.org/en/master/ext/todo.html
todo_include_todos = True


# -----------------------------------------------------------------------------
# Setup function
# -----------------------------------------------------------------------------


# noinspection PyUnusedLocal
def skip(
    app: Sphinx,
    what: str,
    name: str,
    obj: Any,
    would_skip: bool,
    options: Options,
) -> bool:
    # Called by sphinx.ext.autodoc.Documenter.filter_members (q.v.).
    if name == "__init__":
        return False
    return would_skip


def setup(app: Sphinx) -> None:
    # Add CSS
    # - https://stackoverflow.com/questions/23462494/how-to-add-a-custom-css-file-to-sphinx  # noqa
    app.add_css_file("css/camcops_docs.css")  # may also be an URL

    # Bootstrap icons
    app.add_css_file("bootstrap-icons-1.7.0/bootstrap-icons.css")

    # Don't skip __init__
    # https://stackoverflow.com/questions/5599254/how-to-use-sphinxs-autodoc-to-document-a-classs-init-self-method  # noqa
    app.connect("autodoc-skip-member", skip)


main_only_quicksetup_rootlogger(level=logging.INFO)

# https://stackoverflow.com/questions/5599254/how-to-use-sphinxs-autodoc-to-document-a-classs-init-self-method  # noqa
# autoclass_content = "both"
autoclass_content = "class"

# To prevent Alembic env.py breaking:
os.environ["_SPHINX_AUTODOC_IN_PROGRESS"] = "true"

# To prevent e.g. "SAWarning: Unmanaged access of declarative attribute _group
# from non-mapped class Task":
warnings.filterwarnings("ignore", category=SAWarning)
# ... not suppress_warnings, which is about Sphinx warnings; see
# https://www.sphinx-doc.org/en/master/usage/configuration.html
